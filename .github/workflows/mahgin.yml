name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure RDP and Firewall Settings
        run: |
          # Enable RDP and allow connections without NLA
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
              -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
              -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
              -Name "SecurityLayer" -Value 0 -Force

          # Delete existing rule and add new firewall rule for RDP
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart Remote Desktop service
          Restart-Service -Name TermService -Force

          # Hyper-V off is manual - recommend to run from host or with bcdedit /set hypervisorlaunchtype off

      - name: Create Administrator RDP User with Random Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
              Add-LocalGroupMember -Group "Administrators" -Member "RDP"
              Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          } else {
              Write-Host "User RDP already exists"
          }

          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $msiUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $msiPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $msiUrl -OutFile $msiPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$msiPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $msiPath -Force

      - name: Connect to Tailscale Network
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $attempt = 0
          while (-not $tsIP -and $attempt -lt 10) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              Start-Sleep -Seconds 5
              $attempt++
          }
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned"
              exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP Availability
        run: |
          Write-Host "Checking RDP on $env:TAILSCALE_IP"
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $test.TcpTestSucceeded) {
              Write-Error "RDP port 3389 unreachable"
              exit 1
          }
          Write-Host "RDP port reachable"

      - name: Maintain RDP Session (Manual Stop)
        run: |
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "User: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "=================="
          while ($true) {
              Write-Host "[$(Get-Date)] RDP active. Stop workflow manually to terminate."
              Start-Sleep -Seconds 300
          }
          
