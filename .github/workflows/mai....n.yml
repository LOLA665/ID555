name: Windows 11 Monster PC with Simulated Hardware

on:
  workflow_dispatch:

jobs:
  setup-emulated-pc:
    runs-on: windows-2022  # Windows Server 2022 ca aproximare Windows 11 AMI public Microsoft
    permissions:
      contents: read
      id-token: write
    timeout-minutes: 3600

    steps:
      - name: Create and mount 699GB virtual SSD (VHDX)
        run: |
          $VhdPath = "C:\virtualSSD.vhdx"
          $SizeBytes = 699GB
          if (-not (Test-Path $VhdPath)) {
              New-VHD -Path $VhdPath -SizeBytes $SizeBytes -Dynamic
              Mount-VHD -Path $VhdPath
              $disk = Get-Disk | Where-Object PartitionStyle -Eq "RAW"
              Initialize-Disk -Number $disk.Number -PartitionStyle GPT -PassThru | `
                New-Partition -UseMaximumSize -AssignDriveLetter | `
                Format-Volume -FileSystem NTFS -NewFileSystemLabel "VirtualSSD" -Confirm:$false
              Write-Host "Virtual SSD de 699GB creat si montat"
          } else {
              Mount-VHD -Path $VhdPath
              Write-Host "Virtual SSD deja existent montat"
          }

      - name: Simulate GPU as NVIDIA RTX 5080 in Registry (visual only)
        run: |
          $regPath = "HKLM:\SYSTEM\CurrentControlSet\Enum\DISPLAY"
          $deviceKeys = Get-ChildItem -Path $regPath -Recurse
          foreach ($key in $deviceKeys) {
            try {
              $deviceDesc = (Get-ItemProperty -Path $key.PSPath -Name "DeviceDesc" -ErrorAction Stop).DeviceDesc
              if ($deviceDesc -match "Microsoft Basic Display Adapter") {
                Set-ItemProperty -Path $key.PSPath -Name "DeviceDesc" -Value "NVIDIA RTX 5080 Emulator"
                Write-Host "Numele display-ului schimbat în NVIDIA RTX 5080 Emulator"
              }
            } catch {
              # Ignoră erori
            }
          }

      - name: Set emulated RAM 32GB and real accessible RAM 16GB info
        run: |
          # RAM fizic e 16GB, dar setam env var pentru 32GB emulat pentru referinta in script
          echo "EMULATED_RAM=32GB" >> $env:GITHUB_ENV
          echo "REAL_RAM=16GB" >> $env:GITHUB_ENV
          Write-Host "RAM emulat: 32GB, RAM real: 16GB setat variabile de mediu"

      - name: Configure RDP access and firewall
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name "SecurityLayer" -Value 0 -Force

          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          Restart-Service -Name TermService -Force

      - name: Create Admin user for RDP
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper = [char[]](65..90)
              Lower = [char[]](97..122)
              Number = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "RDP"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          }

          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

      - name: Install and connect Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Verify RDP connectivity and keep session active
        run: |
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
            Write-Error "Connection to RDP port failed"
            exit 1
          }
          Write-Host "Connection to RDP port successful"
          Write-Host "=== RDP ACCESS DETAILS ==="
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host $(echo $env:RDP_CREDS)
          Write-Host "Emulated RAM: $env:EMULATED_RAM"
          Write-Host "Real RAM: $env:REAL_RAM"
          Write-Host "SSD size: 699GB VirtualSSD"
          Write-Host "GPU Name (simulated): NVIDIA RTX 5080 Emulator"
          Write-Host "==========================="
          while ($true) {
            Write-Host "[$(Get-Date)] RDP active. Terminate manually to stop."
            Start-Sleep -Seconds 300
          }
          
